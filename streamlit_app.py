import streamlit as st
import requests
import pandas as pd

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://127.0.0.1:8000"
st.set_page_config(layout="wide")


def main():
    st.title("üìä –°–µ—Ä–≤–∏—Å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if 'selected_segment' not in st.session_state:
        st.session_state.selected_segment = None
    if 'selected_user' not in st.session_state:
        st.session_state.selected_user = None

    # –°–∞–π–¥–±–∞—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.radio("Go to", ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–°–µ–≥–º–µ–Ω—Ç—ã", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

    if page == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        show_users_page()
    elif page == "–°–µ–≥–º–µ–Ω—Ç—ã":
        show_segments_page()
    elif page == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
        show_distribution_page()
    elif page == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics_page()


def show_users_page():
    st.header("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
        with st.form("create_user_form"):
            name = st.text_input("–ò–º—è", key="user_name")
            email = st.text_input("Email", key="user_email")
            if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å"):
                try:
                    response = requests.post(
                        f"{API_BASE_URL}/users/",
                        json={"name": name, "email": email}
                    )
                    if response.status_code == 201:
                        st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                    else:
                        st.error(response.json().get("detail", "–û—à–∏–±–∫–∞"))
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    st.subheader("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    try:
        users = requests.get(f"{API_BASE_URL}/users/").json()
        users_df = pd.DataFrame(users)

        if not users_df.empty:
            st.session_state.selected_user = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                users_df['id'],
                format_func=lambda x: f"ID: {x} - {users_df[users_df['id'] == x]['name'].values[0]}"
            )

            selected_user_data = users_df[users_df['id'] == st.session_state.selected_user].iloc[0]
            st.write(f"**Email:** {selected_user_data.get('email', 'N/A')}")

            # –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.subheader("–°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            segments = requests.get(
                f"{API_BASE_URL}/users/{st.session_state.selected_user}/segments"
            ).json()

            if segments:
                segments_df = pd.DataFrame({"–°–µ–≥–º–µ–Ω—Ç—ã": segments})
                st.dataframe(segments_df, hide_index=True)
            else:
                st.info("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤")

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with st.expander("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                all_segments = requests.get(f"{API_BASE_URL}/segments/").json()
                segment_names = [s['segment'] for s in all_segments]

                col1, col2 = st.columns(2)
                with col1:
                    add_segment = st.selectbox("–î–æ–±–∞–≤–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç", segment_names)
                    if st.button("–î–æ–±–∞–≤–∏—Ç—å"):
                        try:
                            response = requests.post(
                                f"{API_BASE_URL}/users/{st.session_state.selected_user}/segments/{add_segment}"
                            )
                            if response.status_code == 200:
                                st.success("–°–µ–≥–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
                                
                        except Exception as e:
                            st.error(f"Error: {str(e)}")

                with col2:
                    if segments:
                        remove_segment = st.selectbox("–£–¥–∞–ª–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç", segments)
                        if st.button("–£–¥–∞–ª–∏—Ç—å"):
                            try:
                                response = requests.delete(
                                    f"{API_BASE_URL}/users/{st.session_state.selected_user}/segments/{remove_segment}"
                                )
                                if response.status_code == 200:
                                    st.success("–°–µ–≥–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

                            except Exception as e:
                                st.error(f"Error: {str(e)}")
                    else:
                        st.info("–ù–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            st.info("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")


def show_segments_page():
    st.header("üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏")

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç"):
        with st.form("create_segment_form"):
            name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", key="segment_name")
            description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", key="segment_desc")
            if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç"):
                try:
                    response = requests.post(
                        f"{API_BASE_URL}/segments/",
                        json={"segment": name, "description": description}
                    )
                    if response.status_code == 201:
                        st.success("–°–µ–≥–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!")
                    else:
                        st.error(response.json().get("detail", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞"))
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç: {str(e)}")

    # –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    st.subheader("–°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    try:
        segments = requests.get(f"{API_BASE_URL}/segments/").json()
        segments_df = pd.DataFrame(segments)

        if not segments_df.empty:
            st.session_state.selected_segment = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç",
                segments_df['segment'],
                format_func=lambda x: f"{x} - {segments_df[segments_df['segment'] == x]['description'].values[0]}"
            )

            selected_segment_data = segments_df[segments_df['segment'] == st.session_state.selected_segment].iloc[0]

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–≥–º–µ–Ω—Ç–µ
            col1, col2 = st.columns([3, 1])
            with col1:
                st.write(f"#### {selected_segment_data['segment']}")

            with col2:
                if st.button("–£–¥–∞–ª–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç", type="primary"):
                    try:
                        response = requests.delete(
                            f"{API_BASE_URL}/segments/{st.session_state.selected_segment}"
                        )
                        if response.status_code == 200:
                            st.success("–°–µ–≥–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω!")
                            st.experimental_rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
            with st.expander("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"):
                with st.form("update_desc_form"):
                    new_desc = st.text_area("–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", value=selected_segment_data['description'])
                    if st.form_submit_button("–ò–∑–º–µ–Ω–∏—Ç—å"):
                        try:
                            response = requests.put(
                                f"{API_BASE_URL}/segments/{st.session_state.selected_segment}/description",
                                params={"new_description": new_desc}
                            )
                            if response.status_code == 200:
                                st.success("–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!")
                                st.experimental_rerun()
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
            st.write("#### –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ")
            try:
                users = requests.get(
                    f"{API_BASE_URL}/segments/{st.session_state.selected_segment}/users"
                ).json()['users']

                if users:
                    users_df = pd.DataFrame({"Username": users})
                    st.dataframe(users_df, hide_index=True)
                else:
                    st.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ–≥–º–µ–Ω—Ç–µ")
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–∞: {str(e)}")
        else:
            st.info("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞")
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã: {str(e)}")


def show_distribution_page():
    st.header("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")

    try:
        segments = requests.get(f"{API_BASE_URL}/segments/").json()
        segment_names = [s['segment'] for s in segments]

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            segment = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç", segment_names)
            percent = st.slider("–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç", 0, 100, 10)

            if st.button("–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º %"):
                try:
                    response = requests.post(
                        f"{API_BASE_URL}/segments/{segment}/distribute",
                        json={"percent": percent}
                    )
                    if response.status_code == 200:
                        st.success(response.json()['message'])
                    else:
                        st.error(response.json().get("detail", "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"))
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å: {str(e)}")

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
            st.write("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏")
            try:
                dist_info = requests.get(
                    f"{API_BASE_URL}/segments/{segment}/distribute"
                ).json()
                st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ–≥–º–µ–Ω—Ç–µ:** {dist_info['user_count']}")
                st.write(f"**–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {dist_info['total_users']}")
                st.write(f"**–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:** {dist_info['percent']:.2f}%")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏: {str(e)}")

        with col2:
            st.subheader("–ü–µ—Ä–µ–Ω–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–∂–¥—É —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏")
            from_segment = st.selectbox("–ò–∑", segment_names, key="from_seg")
            to_segment = st.selectbox("–í", segment_names, key="to_seg")

            if st.button("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"):
                if from_segment == to_segment:
                    st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã")
                else:
                    try:
                        response = requests.post(
                            f"{API_BASE_URL}/segments/move_users",
                            json={"from_segment": from_segment, "to_segment": to_segment}
                        )
                        if response.status_code == 200:
                            st.success(response.json()['message'])
                        else:
                            st.error(response.json().get("detail", "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
                    except Exception as e:
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã: {str(e)}")


def show_statistics_page():
    st.header("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    try:
        stats = requests.get(f"{API_BASE_URL}/segments/stats").json()

        if stats:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ DataFrame
            stats_df = pd.DataFrame(stats)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            st.dataframe(
                stats_df[['segment', 'user_count']].rename(columns={
                    'segment': '–°–µ–≥–º–µ–Ω—Ç',
                    'user_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
                }),
                hide_index=True
            )

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
            st.bar_chart(stats_df.set_index('segment')['user_count'])
        else:
            st.info("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {str(e)}")


if __name__ == "__main__":
    main()